/*
    自增【或者自减】
    分类：
    前自增-- ++i
    后自增 -- i++

    前自增和后自增的异同；
    相同：
    最终都使i的值加1
    不同：
    前自增整体表达式的值是i加1之后的值
    后自增整体表达式的值是i加1之前的值

    为什么会出现自增
    代码更精炼
    自增速度更快
    学习自增要明白的几个问题
    1.编程时尽量屏蔽前自增和后自增的区别
     2.自增表达式最好不要作为一个更大的表达式的一部分来使用
     i++和++i单独成一个语句使用，不要把它作为一个完整的复合语句的一部分来使用
     比如：
            int m = i++ + ++i + i + i++;  //这样写不但是不规范,而且是不可移植的 
            printf("%d %d %d",i++, ++i, i); //同上
*/
#include <stdio.h>

int main()
{
    int i;
    int j;
    int k;
    int m;

    i = j = 3; //等价与  i =3 , j = 3
    k = i++;   //后自增表达的是i+1之前的值
    m = ++j;   //前自增表达的是i+1之后的值

    printf("i = %d j = %d k = %d m = %d", i, j, k, m);
}
///在vs2019输出结果：i = 4, j = 4, k = 3, m = 4


//#########################下面的更容易理解########################
/*
++i, --i  (在使用i之前，先使i的值加（减）1)

i++, i--   (在使用i之后，使i的值加（减）1)



其中++i和i++的作用相当于i = i + 1。但是++i和i++不同之处在于++i是先执行i = i + 1后，再使用i的值；而i++是先使用i的值后，再执行i = i + 1。如果i的原值等于3，请分析下面的赋值语句：



j = ++i; //i的值先变成4，再赋值给j，j的值才为4

j = i++; //先将i的值3赋给j，j的值为3，然后i变为4



又例如：

i = 3;

printf(“% d”, ++i);  //输出4，此时i=4

若改为：

printf(“% d”, i++);  //输出3，此时i=4
————————————————
版权声明：本文为CSDN博主「梁辉0811」的原创文章，遵循CC 4.0 BY - SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/lianghui0811/article/details/48736109
*/