//时间：2021年6月6日16：21分
#include <stdio.h>
/*
int main()
{
	int i;
	float sum = 0;
	for (i = 1; i <= 100; ++i)
	{
		//sum = sum + 1 / (float)(i);  //把 i 改成 (float)(i) 这是强制类型转换
		//sum = sum + (float)(1 / i);  //错误用法
		sum = sum + 1.0 / i;          //更简单的写法   1.0默认为double类型

	}
	printf("%f\n", sum);   //float 需要用 %f 进行输出
}
/*
/*
强制类型转化
       格式：
	        (数据类型)(表达式)
	   功能：把表达式的值强制转化为前面所执行的数据类型
	   例子： (int)(4.5+2.2) 最终值是 6
	          (float)(5)     最终值是 5.000000
*/

/*浮点数的存错所带来的问题
 float 和 double 都不能保证可以精确的存储一个小数
 举例：
      有一个浮点型变量x, 如何判断x的值是否为零
        if(|x - 0.000001| < 0.000001)
              是零
        else
              不是零
 */
      
/*	 // 为什么循环中更新的变量不能定义为浮点型
int main()
{
	float x = 86.765;
	printf("%f\n", x);
}
//输出结果为86.764999
*/



//3.多层for循环嵌套使用顺序
/*
for (1; 2; 3)
{
	for (4; 5; 6)
		语句A;
}
顺序为：1, 2, 4, 5, A, 6, 然后如果5成立则继续循环5, A, 6

如果5不成立则, 3，循环结束。如果2成立继续4, 5, A, 6

如果2不成立则整个循环结束
*/